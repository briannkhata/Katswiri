//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Katswiri.Data
{
    using System;
    using System.Collections.Generic;
    
    using FluentValidation.Internal;
    using FluentValidation.Resources;
    using FluentValidation.Results;
    using FluentValidation;
    using FluentValidation.Validators;
    
     public partial class BankDto
    {
        
        //Default Constructor
        public BankDto(){}
        
        public  class AbstractValidatorEF : AbstractValidator<BankDto>
        {
            public AbstractValidatorEF()
            {
              SetValidationRules();
            }
            
            public virtual void SetValidationRules()
            {
                RuleFor(x => x.BankId).NotNull();
                RuleFor(x => x.BankName).MaximumLength(50).NotEmpty();
                RuleFor(x => x.BankCode).MaximumLength(50).NotEmpty();
                RuleFor(x => x.Deleted).NotNull();
               
            }
       
        }
    
        
        
        
        /// <summary>
        /// Converts Bank Dto to Bank EF Model
        /// </summary>
        /// <returns>Bank EF model</returns>
        public Bank ToEFModel()
        {
            var model = new Bank();
            model.BankId = this.BankId;
            model.BankName = this.BankName;
            model.BankCode = this.BankCode;
            model.Deleted = this.Deleted;
            return model;
        }
    
    
        // <summary>
        /// Creates a Dto from a Bank Entity Model
        /// </summary>
        /// <param name="model">Bank model</param>
        /// <returns>Bank Dto</returns>
        public static BankDto FromEFModel(Bank model)
        {
            if(model == null) return null;
            var dto = new BankDto();
            dto.BankId = model.BankId;
            dto.BankName = model.BankName;
            dto.BankCode = model.BankCode;
            dto.Deleted = model.Deleted;
            return dto;
        }
    
    
        public int BankId { get; set; }
        public string BankName { get; set; }
        public string BankCode { get; set; }
        public int Deleted { get; set; }
    }
}
